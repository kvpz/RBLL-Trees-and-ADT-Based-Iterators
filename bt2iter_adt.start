/*
    bt2iter_adt.h
    <erase instructions and finish file header info here>

    Instructions:

    1. Complete the implementation of Iterator support methods.  Do not
       copy/paste ANY code - type everyting, one character at a time, working
       from memory and understanding. Consult lecture notes only when stuck, but
       STILL type it, do not copy it.
       
    2. Study all the other implementations especially those of the public
       methods. 
*/

/*
    <file documentation - requires modification>

    binary tree iterator classes designed to operate on 2-way trees
    (no parent pointer)

    Container class C is assumed to define the following Node methods:

      IsDead()
      HasLeftChild()
      HasRightChild()

    Iterator support required in C:

    Iterator Begin() const
    {
      Iterator i;
      i.Init(root_);
      return i;
    }

    Iterator End() const
    {
      Iterator i;
      return i;
    }

    Iterator rBegin() const
    {
      Iterator i;
      i.rInit(root_);
      return i;
    }

    Iterator rEnd() const
    {
      Iterator i;
      return i;
    }

*/

// #include <cstddef>     // size_t
// #include <cstdint>     // uint8_t
// #include <ansicodes.h>
// #include <iostream>
// #include <iomanip>
// #include <compare.h>   // LessThan

#include <queue.h>     // LevelorderIterator,  Dump()
#include <stack.h>     // InorderIterator deque-based stack
#include <vector.h>    // InorderIterator alternative
#include <list.h>      // InorderIterator alternative
#include <debug.h>     // argh

#ifndef _BT2ITER_ADT_H
#define _BT2ITER_ADT_H

namespace fsu
{

  template < class C >
  class InorderBTIterator;     // patterns: ConstIterator, BidirectionalIterator

  template < class C >
  class PreorderBTIterator;    // patterns: ConstIterator, BidirectionalIterator

  template < class C >
  class PostorderBTIterator;   // patterns: ConstIterator, BidirectionalIterator

  template < class C >
  class LevelorderBTIterator;  // patterns: ConstIterator, ForwardIterator

  /******************************************************************/
  /*    LevelorderBTIterator < C >                                  */
  /******************************************************************/

  template < class C >
  class LevelorderBTIterator // patterns: ConstIterator, BidirectionalIterator
  {
  public: // terminology support
    typedef typename C::ValueType    ValueType;
    typedef typename C::Node         Node;
    typedef LevelorderBTIterator<C>  ConstIterator;
    typedef LevelorderBTIterator<C>  Iterator;

  private: // inner sanctum
    friend C;
    fsu::Queue < Node* > que_; // default is deque-based

  public:
    // first class
    LevelorderBTIterator                 () : que_() {}
    virtual  ~LevelorderBTIterator       () { que_.Clear(); }
    LevelorderBTIterator                 (const LevelorderBTIterator& i) : que_(i.que_) {}
    LevelorderBTIterator<C>&  operator=  (const LevelorderBTIterator& i) { que_ = i.que_; return *this; }

    // information/access
    bool  Valid   () const { return !que_.Empty(); } // Iterator can be de-referenced

    // various operators
    bool                      operator== (const LevelorderBTIterator& i2) const { return que_ == i2.que_; }
    bool                      operator!= (const LevelorderBTIterator& i2) const { return !(*this == i2); }
    const ValueType&          operator*  () const { return que_.Front()->value_; }
    LevelorderBTIterator<C>&  operator++ ();    // prefix
    LevelorderBTIterator<C>   operator++ (int); // postfix

  private:
    void Init      (Node* n);
    void Increment ();
  };

  template < class C >
  void LevelorderBTIterator<C>::Init(Node* n)
  {
    que_.Clear();
    if (n == nullptr) return;
    que_.Push(n);
    while (!que_.Empty() && que_.Front()->IsDead())
      Increment();
  }

  template < class C >
  void LevelorderBTIterator<C>::Increment()
   {
    // fsu::Debug("Increment()");
    if ( que_.Empty() )
      return;
    // *****************
    // missing code here
    // *****************
  }

  template < class C >
  LevelorderBTIterator<C>&  LevelorderBTIterator<C>::operator++ ()
  {
    // fsu::Debug("operator++()");
    do Increment();
    while (!que_.Empty() && que_.Front()->IsDead());
    return *this;
  }

  template < class C >
  LevelorderBTIterator<C>   LevelorderBTIterator<C>::operator++ (int)
  {
    LevelorderBTIterator<C> i(*this);
    this->operator++();
    return i;
  }

  /******************************************************************/
  /*    InorderBTIterator < C >                                     */
  /******************************************************************/

  template < class C >
  class InorderBTIterator // patterns: ConstIterator, BidirectionalIterator
  {
  public: // terminology support
    typedef typename C::ValueType    ValueType;
    typedef typename C::Node         Node;
    typedef InorderBTIterator<C>     ConstIterator;
    typedef InorderBTIterator<C>     Iterator;

  private: // inner sanctum
    friend C;
    // fsu::Stack < Node* > stk_; // default is deque-based - better safety & error detection
    fsu::Stack < Node* , fsu::Vector < Node* > > stk_; // faster

  public:
    // first class
    InorderBTIterator                 () : stk_() {}
    virtual  ~InorderBTIterator       () { stk_.Clear(); }
    InorderBTIterator                 (const InorderBTIterator& i) : stk_(i.stk_) {}
    InorderBTIterator<C>&  operator=  (const InorderBTIterator& i) { stk_ = i.stk_; return *this; }

    // information/access
    bool  Valid   () const { return !stk_.Empty(); } // Iterator can be de-references

    // various operators
    bool                   operator== (const InorderBTIterator& i2) const { return stk_ == i2.stk_; }
    bool                   operator!= (const InorderBTIterator& i2) const { return !(*this == i2); }
    const ValueType&       operator*  () const { return stk_.Top()->value_; }
    InorderBTIterator<C>&  operator++ ();    // prefix
    InorderBTIterator<C>   operator++ (int); // postfix
    InorderBTIterator<C>&  operator-- ();    // prefix
    InorderBTIterator<C>   operator-- (int); // postfix

  private:
    void Init      (Node* n); // live nodes only
    void sInit     (Node* n); // structural (all nodes) version - pair with Increment for structural traversal
    void rInit     (Node* n); // live nodes only
    void Increment (); // structural version of ++
    void Decrement (); // structural version of --
  };

  template < class C >
  void InorderBTIterator<C>::sInit(Node* n)
  {
    if (n == nullptr) return;
    stk_.Clear();
    stk_.Push(n);
    // *****************
    // missing code here
    // *****************
  }

  template < class C >
  void InorderBTIterator<C>::Init(Node* n)
  {
    if (n == nullptr) return;
    stk_.Clear();
    stk_.Push(n);
    // *****************
    // missing code here
    // *****************
  }

  template < class C >
  void InorderBTIterator<C>::rInit(Node* n)
  {
    stk_.Clear();
    if (n == nullptr) return;
    stk_.Push(n);
    // *****************
    // missing code here
    // *****************
  }

  template < class C >
  void InorderBTIterator<C>::Increment()
  {
    // fsu::Debug("Increment()");
    if ( stk_.Empty() )
      return;
    // *****************
    // missing code here
    // *****************
  }

  template < class C >
  void InorderBTIterator<C>::Decrement()
  {
    // fsu::Debug("Decrement()");
    if ( stk_.Empty() )
      return;
    // *****************
    // missing code here
    // *****************
  }

  template < class C >
  InorderBTIterator<C>&  InorderBTIterator<C>::operator++ ()
  {
    // fsu::Debug("operator++()");
    do Increment();
    while (!stk_.Empty() && stk_.Top()->IsDead());
    return *this;
  }

  template < class C >
  InorderBTIterator<C>   InorderBTIterator<C>::operator++ (int)
  {
    InorderBTIterator<C> i(*this);
    this->operator++();
    return i;
  }

  template < class C >
  InorderBTIterator<C>&  InorderBTIterator<C>::operator-- ()
  {
    // fsu::Debug("operator--()");
    do Decrement();
    while (!stk_.Empty() && stk_.Top()->IsDead());
    return *this;
  }

  template < class C >
  InorderBTIterator<C>   InorderBTIterator<C>::operator-- (int)
  {
    InorderBTIterator<C> i(*this);
    this->operator--();
    return i;
  }

} // namespace fsu 

#endif

